一，简介
	JavaEE作为一种企业级应用开发平台，其优异的表现是我们有目共睹的。但是，要想合理并充分的发挥其平台提供的各项服务，就需要一个优秀的框架，Spring便呼之即出。它是一
个轻量级的Java开发框架。在Spring之前，开发人员使用的最广泛的JavaEE开发框架当属EJB了，它也是使用JavaEE平台各项服务的一种方式，但是更适用于分布式环境（场景），
EJB由于最佳场景的限制，其缺点也是显露无疑：需要拥有EJB Container的应用服务器；增加开发，测试，部署的复杂度；最佳场景为分布式（中小型应用不适合）。

二，基于Spring的功能树
最底层：Core核心模块——IoC容器、Framework工具类（IO工具类等）
基于核心core的上层模块：
	（1）AOP模块：提供了一个AOP框架，可以以AOP的形式增强各POJO，采用proxy模式构建，与底层IoC容器结合，可以显示出其强大的威力。
		（1.1）Spring框架在core核心模块和AOP模块的基础之上，为我们提供了完备的数据访问和事务管理的抽象和集成服务。（DAO，Spring JDBC，事务管理）
		（1.2）Spring框架为各种当前业界流行的ORM产品：Hibernate、iBATIS、JTA等提供了形式统一的集成支持。
	（2）集成封装简化各种Java EE服务的使用：JNDI、JMS、JavaMail、Remoting等。
	（3）Web模块：Spring框架提供了一套自己的Web MVC框架——Spring MVC以及基于此的Spring Portlet MVC；与此同时，Spring框架同样对诸如Struts
	                                的其他的Web框架提供了集成支持；此外，Spring还集成了各种视图类型。
	
三，Spring IoC容器
	IoC，Inversion of Control，即控制反转，它还有一个别名叫依赖注入（也有说依赖注入是控制反转的一种方式）。以前我们要在一个类中使用另一个类提供的服务，通常
会在构造函数中new一个依赖对象，这是一种主动直接获取的方式。IoC则避免了这种主动获取的方式，它的反转就是从原来的事必躬亲变成现在的享受服务，所有的被注入对象和依赖对象都
由IoC Service Provider统一管理，被注入对象需要什么服务直接通知一下，后者就会将被依赖对象注入到其中，依赖对象的取得方式发生了反转，控制权也从被注入对象转到了IoC
Service Provider。
	那么被注入对象是通过哪些方式来通知IoC Service Provider为其提供服务的呢？
	通常有三种方式：构造函数注入、setter方法注入以及接口注入（侵入式较强，逐渐被淘汰）。
（1）IoC Service Provider（ISP）
	IoC Service Provider在这里是一个抽象出来的概念，它可以指代任何将IoC场景中的业务对象绑定到一起的实现方式。它可以是一段代码，也可以是一组相关的类，甚至可以
是比较通用的IoC框架或者IoC容器实现。
	IPerson person = new Man();
	IWork work = new MakeMoney();
	PersonProvider provider = new PersonProvider(person, work);
	provider.getWorkPerson();
	上面的代码就是一个最简易的IoC Service Provider。同样，Spring的IoC容器就是一个提供依赖注入服务的IoC Service Provider。ISP的职责主要有两个：*****
业务对象的构建管理和业务对象间的依赖绑定。
	业务对象的构建管理（注册）在IoC容器启动的时候完成。而决定业务对象间的依赖绑定关系通常有三种方式：
	直接编码方式：
	IoContainer container = ....; // 获取容器
	container.register(PersonProvider.class, new PersonProvider()); // 注册业务类
	container.register(IPerson.class, new Man()); // 注册业务对象，为相应的类指定具体的实例
	... 
	PersonProvider provider = (PersonProvider)container.get(PersonProvider.class); // 直接从容器中获取所需类对象即可
	provider.getWorkPerson();
	
	配置文件方式（更为普遍）：
	<bean id="provider" class="..PersonProvider">
		<property name="person">
			<ref bean="man"/>
		</property>
	</bean>
	<bean id="man" class="..impl.Man"/>
	<bean id="work" class="..impl.MakeMoney"/>
	
	元数据方式（略）
	
四，Spring容器之BeanFactory
	Spring提供了两种容器类型：BeanFactory和ApplicationContext。
	BeanFactory是一个基础类型的IoC容器，默认采用延迟初始化策略，适用于资源有限的场景。BeanFactory作为Spring提供的基本容器类型，可以完成作为
ISP的所有职责，包括业务对象的注册和依赖关系的绑定。显然，BeanFactory会提供一个获取对象的方法接口（getBean(..)方法等）。
	注意，补充一下，是否引入容器，对业务接口与实现类的设计是没有影响的，它影响的是对象的获取方式和对象间的依赖关系。
	使用Xml可以进行bean的管理，还可以解决bean的依赖关系，Spring的<bean>标签提供了两种解决bean之间依赖关系的方式：
	（1）构造方法注入，使用的标签是<constructor-arg>，需要被注入bean对象提供对应的构造方法
	<bean id="provider" class="..PersonProvider"/>
		<constructor-arg ref="man">
	</bean>
	（2）setter方法注入，使用的标签是<property>，需要被注入的bean对象提供对应的setPerson()方法
	<bean id="provider" class="..PersonProvider">
		<property name="person" value="man"/>
	</bean>
	实际选择时最好的解决方案是用构造器参数实现强制依赖，setter方法实现可选依赖。

五，Spring容器之ApplicationContext
	ApplicationContext在BeanFactory的基础之上构建，提供更多功能（如事件发布、国际化信息支持、统一资源加载策略等），属于高级容器。该接口的直接子类
是AbstractApplicationContext。（区别于Struts1/Struts2的ServletContext/ActionContext：Action之间相互通信以及资源路径等）
	Spring为基础容器BeanFactory提供了XMLBeanFactory实现，同样，它也为ApplicationContext类型的容器提供了以下常用的实现：
	（1）FileSystemXMLApplicationContext：默认情况下，从文件系统加载bean定义以及相关资源的ApplicationContext实现；
	（2）ClassPathXMLApplicationContext：默认情况下，从classpath加载定义以及相关资源的ApplicationContext实现；
	（3）XMLWebApplicationContext：用于Web应用的ApplicationContext实现。
	
	统一资源加载策略：Spring框架内部使用org.springframework.core.io.Resource接口作为所有资源的抽象和访问接口，Resource接口可以根据资源
		的不同类型，或则资源所处的不同场合，给出相应的具体实现，Spring框架在这个理念的基础上，提供了一些实现类，比如ClassPathResource。
		对于资源的加载，ApplicationContext间接继承了ResourceLoader接口，因此任何ApplicationContext实现都是一个资源加载器。
	
六，Spring AOP框架
	AOP，即面向切面的编程，Spring AOP采用动态代理机制（需要实现接口）和CGLIB字节码生成技术（可以不用实现接口）实现，在程序运行期间为目标对象生成
一个代理对象，对目标对象的行为进行增强。
	如果有一个需求是对系统中所有的request()方法进行拦截，静态代理的处理方式是为所有拥有request()方法的目标类创建一个代理类，如果目标类型太多，
那么就需要创建许多的代理类。
	动态代理解决了这个问题，在确定了切入点后，我们只需要写一个执行器，用Object接收传递进来的目标对象，目标对象的执行交给实现了InvocationHandler
接口的执行器即可。（执行器为什么要固定实现这个接口，这是为了用户能够灵活的控制代理对象的行为，不用将代理行为写死在代理对象生成的代码中。最终的代理
行为invoke()方法是由执行器来完成的）（代理对象的产生借助Proxy.newProxyInstance(..)的API函数）
	动态代理中，由于代理对象的产生机制决定了被代理对象必须是面向接口编程的，具有一定的局限性。CGLIB动态字节码生成类库解决了这个问题，最终生成的
代理对象Enhancer是目标对象的子类，当然，这也导致CGLIB进行扩展的唯一缺陷，无法对目标对象的final方法进行覆写。（基于接口的代理 vs 基于类的代理）
*** AOP中的一些概念
Aspect(切面):指横切性关注点的抽象即为切面,它与类相似,只是两者的关注点不一样,类是对物体特征的抽象,而切面是对横切性关注点的抽象.
            （横切性关注点指的就是对实现整个代理过程的一种思考，横切性关注点的抽象指的是代理过程的具体实现）
joinpoint(连接点):所谓连接点是指那些被拦截到的点。在spring中,这些点只能是方法,因为spring只支持方法类型的连接点,实际上joinpoint还可以是field或类构造器)
Pointcut(切入点):所谓切入点是指我们要对哪些joinpoint进行拦截的定义，默认是针对所有对象.
Advice(通知):所谓通知是指拦截到joinpoint之后所要做的事情就是通知.通知分为前置通知,后置通知,异常通知,最终通知,环绕通知
Target(目标对象):代理的目标对象。
Weave(织入):指将aspects应用到target对象并导致proxy对象创建的过程称为织入（我们的每一个Handler都是一个织入器）。
Introduction(引入):在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field.
AOP一般用于权限控制，事务管理，日志记录等场合。
	
七，Spring数据访问
	1，JDBCTemplate
	由于JDBC API在使用起来非常的麻烦，Spring框架提出了JdbcTemplate作为数据访问的Helper类，JdbcTemplate是整个Spring数据抽象层提供的所有JDBC API
最佳实践的基础，框架内其它更加方便的Helper类以及更高层次的抽象全部构建与JdbcTemplate之上。
	JdbcTemplate主要关注两件事：封装所有基于JDBC的数据访问代码；将基于JDBC的数据访问异常纳入Spring自身的异常体系中，简化客户端对异常的处理。
	JdbcTemplate的实现其实就是在模板方法设计模式的基础上引入了Callback回调接口（很不错的方式，避免单纯的模板方法模式下需要强制用户继承抽象父类）。
	
	2，DataSource
	J2EE应用服务器提供了DataSource实现，但是获取到的连接对象都是代理对象，无法使用Connection的一些特色功能。如果我们要使用驱动程序提供的数据库
连接，只需要加入驱动对应的jar包即可，然后在Spring的配置文件里面配置一下就可以了。
	Spring默认提供了面向Common DBCP、C3P0、Weblogic和WebSphere等容器外部的数据源的实现类。（一般没用使用对应的第三方jar包提供的实现类）
	注意： DataSource的唯一作用就是获取数据库连接（多种方式），Spring中的JdbcTemplate是在JDBC的规范下进行数据库的原始操作。
	级别：JDBC API ——> JdbcTemplate ——> ORM
	DataSource的分类：
	（1）简单的DataSource实现：org.springframework.jdbc.datasource.DriverManagerDataSource
	（2）拥有连接缓冲池的DataSource实现：Common DBCP和C3p0等
	（3）支持分布式事务的DataSource实现：javax.sql.XADataSource
	DataSource的访问：
	（1）本地DataSource访问：如hsas第一版。
	（2）远程DataSource访问：对于运行于应用服务器的程序或者分布式应用，通过JNDI访问DataSource时最常见的方式。
	
	3，Spring对各种ORM框架的集成
	Spring在继承各种ORM框架时主要关注点有3个：数据访问资源的管理；数据访问异常的转译；事务管理。
	（1）HibernateTemplate，拥有SessionFactory属性，而SessionFactory又拥有DataSource属性，显然SessionFactory产生的Session是可以连接数据库的，
而且它还可以操作数据库。HibernateTemplate的实现采用的设计思路和JdbcTemplate完全是一样的。（印象笔记）（smdb自己实现了一个HibernateTemplate）
	
八、Spring事务管理
	（1）事务本身的4个属性：原子性、一致性、隔离性、持久性。
	原子性：要求事务所包含的全部操作是一个不可分割的整体，这些操作要么全部提交成功，要么全部失败。
	一致性：事务所包含的操作不能违反数据资源的一致性检查，数据资源在事务开始前处于某个一致性状态，事务结束后也要保持数据间的一致性。
			（比如两个账户：A有10元，B有20元，一用户将A账号的钱转了5元到B账号，正常情况下，事物结束后，A中有5元，B中有25元。如果在A执行期间，
			    另一个用户将B中钱取走了5元，这时前面的用户在事务执行完后会发现B账号的钱并没有增加，而A账号的钱却减少了。这就是同一事务中数据间的
			    一致性被破坏了，开始总金额为30，最后只有25了，这种操作是不被允许的。）
	隔离性：规定了各个事务之间相互影响的程度，主要面向数据资源的并发访问，并兼顾影响事务的一致性。
			Read Uncommitted（读未提交）：会出现脏读，不可重复读，幻读。
			Read committed（读已提交）：默认隔离级别。会出现不可重复读和幻读。
			Repeatable Read（可重复读）：会出现幻读。
			Serializable（串行化）：。
			并不是所有的数据库都支持这4种隔离级别，比如Oracle只支持2和4，如果指定的隔离级别数据库不支持，数据库会采用自己默认的隔离级别。
	持久性：一旦事务提交成功，对数据所做的变更将被记录并不可逆转。
	
	（2）7种事务传播属性
		PROPAGATION_REQUIRED：如果当前存在一个事务，则加入；否则，新建一个事务。
		PROPAGATION_SUPPORTS：如果当前存在一个事务，则加入；否则，直接执行。
		PROPAGATION_MANDATORY：强制要求当前存在一个事务。
		PROPAGATION_REQUIRES_NEW：不管当前是否存在事务，都会创建一个新的事务；如果当前存在一个事务，则将其挂起。
		PROPAGATION_NOT_SUPPORTED：不支持当前事务，如果当前存在事务，则挂起，如果当前不存在事务，直接执行。
		PROPAGATION_NEVER：不允许事务存在，若当前存在事务，则抛出异常。
		PROPAGATION_NESTED：如果当前存在事务，则加入；否则，新建事务。
		
	（3）使用Spring进行事务管理：编程式事务管理、声明式事务管理。
	事务管理主要涉及到就是事务开启、事务回滚和事务提交。
	Spring提供了TransactionTemplate实现类来支持编程式事务管理，它的优点是可以进行显式事务控制，它的缺点是事务管理代码与业务代码相互混杂。
	目前使用最为广泛的Spring声明式事务控制采用Spring AOP的设计思想，以业务处理为切入点加入事务控制模块。
	
